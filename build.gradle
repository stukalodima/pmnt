buildscript {
    ext.cubaVersion = '7.2.19'
    repositories {
        mavenCentral()
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
        classpath "se.transmode.gradle:gradle-docker:1.2"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.16.9"
    }
}

def modulePrefix = 'pmnt'

def globalModule = project(":${modulePrefix}-global")
def coreModule = project(":${modulePrefix}-core")
def webModule = project(":${modulePrefix}-web")
def webToolkitModule = project(":${modulePrefix}-web-toolkit")

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'

apply(plugin: 'cuba')
apply(plugin: 'docker')

cuba {
    artifact {
        group = 'com.itk.finance'
        version = '0.9'
        isSnapshot = false
    }
    tomcat {
        port = '5080'
        ajpPort = '5009'
        shutdownPort = '5005'
        debugPort = '5787'
    }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
    appComponent('com.haulmont.addon.helium:helium-global:0.4.0')
    appComponent("com.haulmont.bpm:bpm-global:$cubaVersion")
    appComponent('de.diedavids.cuba.dataimport:dataimport-global:0.14.1')
    appComponent("com.haulmont.charts:charts-global:$cubaVersion")
}

def postgres = 'org.postgresql:postgresql:42.2.9'

configure([globalModule, coreModule, webModule, webToolkitModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')

    dependencies {
        testCompile('org.junit.jupiter:junit-jupiter-api:5.5.2')
        testCompile('org.junit.jupiter:junit-jupiter-engine:5.5.2')
        testCompile('org.junit.vintage:junit-vintage-engine:5.5.2')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
    test {
        useJUnitPlatform()
    }
}


configure(globalModule) {
    dependencies {
        if (!JavaVersion.current().isJava8()) {
            runtime('org.glassfish.jaxb:jaxb-runtime:2.3.1')
        }
    }

    entitiesEnhancing {
        main {
            enabled = true
        }
    }
}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        compileOnly(servletApi)
        jdbc(postgres)
        testRuntime(postgres)
    }

    task cleanConf(description: 'Cleans up conf directory', type: Delete) {
        delete "$cuba.appHome/${modulePrefix}-core/conf"
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}-core"
        appJars(modulePrefix + '-global', modulePrefix + '-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        compileOnly(servletApi)
        compile(globalModule)
    }

    jar {
        with copySpec {
            from sourceSets.main.allJava
            include "com/itk/finance/web/toolkit/ui/client/**"
        }
    }

    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/itk/finance/**"
        into "$cuba.appHome/${modulePrefix}/conf"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = "${modulePrefix}"
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory', type: Delete) {
        delete "$cuba.appHome/${modulePrefix}/conf"
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}"
        appJars(modulePrefix + '-global', modulePrefix + '-web')
    }

    task buildScssThemes(type: CubaWebScssThemeCreation)

    task deployThemes(type: CubaDeployThemeTask, dependsOn: buildScssThemes)

    assemble.dependsOn buildScssThemes

    task themesJar(type: Jar) {
        from file('themes')
        classifier = 'themes'
    }

    artifacts {
        archives themesJar
    }
}

configure(webToolkitModule) {
    dependencies {
        compile(webModule)
    }

    jar {
        from sourceSets.main.allJava
    }

    task buildWidgetSet(type: CubaWidgetSetBuilding) {
        widgetSetClass = 'com.itk.finance.web.toolkit.ui.AppWidgetSet'
    }

    task debugWidgetSet(type: CubaWidgetSetDebug) {
        widgetSetClass = 'com.itk.finance.web.toolkit.ui.AppWidgetSet'
    }

    task webArchive(dependsOn: buildWidgetSet, type: Jar) {
        from file("$buildDir/web")
        classifier = 'client'
    }

    artifacts {
        archives webArchive
    }

    task deploy(dependsOn: webArchive, type: Copy) {
        from webArchive
        into "$cuba.tomcat.dir/webapps/${modulePrefix}/WEB-INF/lib"
    }
}


task undeploy(type: Delete, dependsOn: ":${modulePrefix}-web:cleanConf") {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-core")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}")
}

task restart(dependsOn: ['stop', ":${modulePrefix}-core:deploy", ":${modulePrefix}-web:deploy", ":${modulePrefix}-web-toolkit:deploy"], description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
    }
}
restart.finalizedBy start

task buildUberJar(type: CubaUberJarBuilding) {
    appProperties = ['cuba.automaticDatabaseUpdate': true]
    logbackConfigurationFile = 'etc/uber-jar-logback.xml'
//    webJettyConfPath = 'jetty.xml'
    webPort = 5080
    singleJar = true
}


task buildDockerCore(type: Docker, dependsOn: buildUberJar) {
    applicationName = 'payment-factory'
    tag = "payment-factory-pmnt-core"
    baseImage = 'openjdk:8'
    addFile("build/distributions/uberJar/pmnt-core.jar", "/usr/src/payment-factory/pmnt-core.jar")
    defaultCommand(["java", "-Xms1024m", "-Xmn256m", "-Xmx1024m", "-Dapp.home=/usr/src/payment-factory/pmnt-home", "-jar", "/usr/src/payment-factory/pmnt-core.jar"])
}

task buildDockerWeb(type: Docker, dependsOn: buildDockerCore) {
    applicationName = 'payment-factory'
    tag = "payment-factory-pmnt-web"
    baseImage = 'openjdk:8'
    addFile("build/distributions/uberJar/pmnt.jar", "/usr/src/payment-factory/pmnt.jar")
    defaultCommand(["java", "-Xms1024m", "-Xmn256m", "-Xmx1024m", "-Dapp.home=/usr/src/payment-factory/pmnt-home", "-jar", "/usr/src/payment-factory/pmnt.jar"])
}

task buildDocker(type: Docker, dependsOn: buildDockerWeb) {

}